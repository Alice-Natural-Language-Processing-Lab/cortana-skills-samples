diff --git a/samples/javascript_nodejs/04.simple-prompt/bot.js b/samples/javascript_nodejs/04.simple-prompt/bot.js
index 2b1ff443..5ddb8edc 100644
--- a/samples/javascript_nodejs/04.simple-prompt/bot.js
+++ b/samples/javascript_nodejs/04.simple-prompt/bot.js
@@ -46,21 +46,26 @@ class SimplePromptBot {
 
     // The first step in this waterfall asks the user for their name.
     async askForName(dc) {
-        await dc.prompt(NAME_PROMPT, `What is your name, human?`);
+        await dc.prompt(NAME_PROMPT,
+            {
+                prompt: { text: 'What is your name, human?', speak: 'What is your name human?', retrySpeak: 'What?', inputHint: 'expectingInput' },
+                retryPrompt: { text: 'I asked you your name?', speak: 'I asked you your name!', inputHint: 'expectingInput' } } );
     }
 
     // The second step in this waterfall collects the response, stores it in
     // the state accessor, then displays it.
     async collectAndDisplayName(step) {
         await this.userName.set(step.context, step.result);
-        await step.context.sendActivity(`Got it. You are ${ step.result }.`);
+        let txt = `Got it. You are ${ step.result }.`;
+        await step.context.sendActivity( { text: txt, speak: txt + ' Say something else.', inputHint: 'expectingInput' });
         await step.endDialog();
     }
 
     // This step loads the user's name from state and displays it.
     async displayName(step) {
         const userName = await this.userName.get(step.context, null);
-        await step.context.sendActivity(`Your name is ${ userName }.`);
+        let txt = `Your name is ${ userName }.`;
+        await step.context.sendActivity( { text: txt, speak: txt } );
         await step.endDialog();
     }
 
